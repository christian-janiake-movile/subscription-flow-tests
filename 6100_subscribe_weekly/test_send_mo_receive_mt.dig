timezone: UTC

+setup:
  echo>: start ${session_time}

+disp_current_parameters:
  echo>: Sending keyword ${keyword} to LA ${LA} on carrier ${carrierId}

+send_mo_request:
  http>: ${prometheusUrl}/mo/send
  method: PUT
  store_content: true
  content:
    destination: ${LA}
    text: ${keyword}
    carrierId: ${carrierId}
  _error:
    echo>: ERROR SENDING /send/mo REQUEST

+process_send_mo_response:
  py>: store_param.store_value
  key: send_mo_response
  value: ${http.last_content}

+echo_send_mo_response:
  +echo_send_mo_response_1:
    echo>: response ${send_mo_response}
  +echo_send_mo_response_2:
    echo>: status ${send_mo_response.statusDescription}
  +echo_send_mo_response_3:
    echo>: UUID ${send_mo_response.uuid}


+verify_mo_status:
  _export:
    keep_trying: true
  loop>: ${attempts}
  _do:
    if>: ${keep_trying}
    _do:
      +echo_loop_status:
        echo>: Verify MO status attempt ${i + 1}/${attempts}
      +sleep:
        sh>: sleep ${sleepSeconds}
      +fetch:
        http>: ${prometheusUrl}/mo/status/${send_mo_response.uuid}
        store_content: true
      +process_mo_status:
        py>: store_param.store_value
        key: mo_status
        value: ${http.last_content}
      +echo_mo_status:
        +echo_mo_status_1:
          echo>: response ${mo_status}
        +echo_mo_status_2:
          echo>: statusCode ${mo_status.statusCode}
        +echo_mo_status_3:
          echo>: statusDescription ${mo_status.statusDescription}
      +exit_loop:
        +store_keep_trying:
          py>: store_param.store_value
          key: keep_trying
          value: ${mo_status.statusCode != '2'}

+check_mo_status_ok:
  if>: ${mo_status.statusCode != '2'}
  _do:
    fail>: Send MO failed! Last status is ${mo_status.statusDescription}

+sleep_between_steps:
  sh>: sleep ${sleepSeconds}

+check_mt_received:
  http>: ${prometheusUrl}/mt/status/${carrierId}/${mo_status.msisdn}/${mtLastMinutes}
  store_content: true
  _error:
    echo>: ERROR SENDING /mt/status REQUEST

+process_received_mt:
  for_each>:
    mt: ${http.last_content}
  _do:
    +echo_mt_data:
      echo>: MT RECEIVED ${mt}
    +check_msg:
      for_each>:
        msg: ${mtMessage}
      _do:
        if>: ${mt.messageText.startsWith(msg)}
        _do:
          +echo_mt_match:
            echo>: FOUND MT message matches pattern ${msg}
          +store_mt_match:
            py>: store_param.store_value
            key: mt_received
            value: ${mt}

+check_mt_message:
  if>: ${typeof mt_received === "undefined" || mt_received == null}
  _do:
    fail>: MT message text is not the expected!

+teardown:
  echo>: finish ${session_time}

